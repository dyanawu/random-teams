{"version":3,"sources":["attendance.js","groupings.js","App.js","serviceWorker.js","index.js"],"names":["Attendance","submitHandler","event","keyCode","newName","target","value","trim","length","alert","_this","props","addName","people","this","presentCount","present","absentCount","absent","totalCount","react_default","a","createElement","id","className","type","name","placeholder","onKeyDown","autoComplete","attendance_PresentTab","switch","toggleAttendance","paxCount","attendance_AbsentTab","delete","deleteName","Component","PresentTab","_this2","presentNames","sort","b","localeCompare","map","index","charAt","toUpperCase","slice","key","onClick","AbsentTab","_this3","absentNames","Groupings","state","pax","custom","bucketCount","shuffle","fullGroup","changeHandler","setState","parseInt","toggleCustom","shuffleArray","arr","i","j","Math","floor","random","_ref","customGroups","input","blur","toggleFullGroup","createBuckets","buckets","bucketSize","totalSorted","remainder","group","push","balance","splice","bucket","console","log","renderBucket","names","count","presentPeople","Object","toConsumableArray","shuffled","groups","totalGroups","nolbCheckbox","Fragment","onChange","groupings_SortingMenu","SortingMenu","defaultValue","App","getNamesFromURL","location","search","queryParams","inputQuery","replace","split","queryPair","toLowerCase","formNewURL","currentPeople","newQuery","keys","forEach","newValue","join","newPair","concat","history","updatedPeople","category","clickedName","attendance","src_attendance","groupings","Boolean","window","hostname","match","ReactDOM","render","react_router_dom","basename","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75fc7508.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Attendance extends Component {\n\n    submitHandler = (event) => {\n        if (event.keyCode === 13) {\n            let newName = event.target.value.trim();\n            if (newName.length < 1 ) {\n                alert(\"Please enter a name!\");\n            } else {\n                this.props.addName(newName);\n            };\n            event.target.value = \"\";\n        }\n    }\n\n    render() {\n        let people = this.props.people;\n        let presentCount = people.present ? people.present.length : 0;\n        let absentCount = people.absent ? people.absent.length : 0;\n        let totalCount = presentCount + absentCount;\n\n        return (\n            <div id=\"attendance-wrapper\">\n                <h2>People <span className=\"total-count\">Total: {totalCount}</span></h2>\n                <input type=\"text\" id=\"name-input\" name=\"name\" placeholder=\"enter new name\" onKeyDown={this.submitHandler} autoComplete=\"off\"/>\n                <div id=\"attendance-lists\">\n                    <PresentTab present={people.present} switch={this.props.toggleAttendance} paxCount={presentCount} />\n                    <AbsentTab absent={people.absent} switch={this.props.toggleAttendance} paxCount={absentCount} delete={this.props.deleteName} />\n                </div>\n            </div>\n        )\n    }\n}\n\nclass PresentTab extends Component {\n    render() {\n        let paxCount = this.props.paxCount;\n        let presentNames = null;\n        if (paxCount > 0) {\n            let sorted = this.props.present.sort((a, b) => {\n                return a.localeCompare(b);\n            });\n            presentNames = sorted.map((name, index) => {\n                name = name.charAt(0).toUpperCase() + name.slice(1);\n                return (<div key={index} className=\"name present\" onClick={() => {this.props.switch(\"present\", name, index)}} >{name}</div>)\n            });\n        }\n\n        return (\n            <div className=\"tab\">\n                <h3>Present: <span className=\"pax-count\">{paxCount}</span></h3>\n                <div className=\"names\" id=\"present\">\n                    {presentNames}\n                </div>\n            </div>\n        )\n    }\n}\n\nclass AbsentTab extends Component {\n    render() {\n        let paxCount = this.props.paxCount;\n        let absentNames = null;\n        if (paxCount > 0) {\n            let sorted = this.props.absent.sort((a, b) => {\n                return a.localeCompare(b);\n            });\n            absentNames = sorted.map((name, index) => {\n                name = name.charAt(0).toUpperCase() + name.slice(1);\n                return (\n                    <div key={index} className=\"absent-wrapper\">\n                        <div className=\"name absent\" onClick={() => {this.props.switch(\"absent\", name, index)}} >\n                            {name}\n                        </div>\n                        <span id={name} className=\"trash\" onClick={() => {this.props.delete(name, index)}}>\n                            X\n                        </span>\n                    </div>\n                )\n            });\n        }\n\n        return (\n            <div className=\"tab\">\n                <h3>Absent: <span className=\"pax-count\">{paxCount}</span></h3>\n                <div className=\"names\" id=\"absent\">\n                    {absentNames}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Attendance;","import React, { Component } from 'react';\nimport './App.css';\n\nclass Groupings extends Component {\n    state = {\n        pax: 1,\n        custom: false,\n        bucketCount: 1,\n        shuffle: 0,\n        fullGroup: false\n    }\n\n    changeHandler = (event) => {\n        this.setState({pax: parseInt(event.target.value)});\n    }\n\n    toggleCustom = () => {\n        let custom = !this.state.custom;\n        this.setState({custom: custom});\n    }\n\n    shuffleArray = (arr) => {\n        for (let i = arr.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i+1));\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n        }\n        return arr;\n    }\n\n    customGroups = (event) => {\n        if (event.keyCode === 13) {\n            let input = event.target;\n            this.setState({bucketCount: input.value}, () => {\n                input.value = \"\";\n                input.blur();\n            });\n        };\n    }\n\n    toggleFullGroup = () => {\n        let fullGroup = !this.state.fullGroup;\n        this.setState({fullGroup: fullGroup});\n    }\n\n    createBuckets = (arr) => {\n        // if fullGroup, do modulus\n        // if mod > 0, arr.length = arr.length - remainder\n        // once everything sorted, using for loop insert remainder into created groups\n        \n        let buckets = [];\n        if (this.state.custom) {\n            // buckets restricted by bucketCount\n            let bucketCount = this.state.bucketCount;\n            let bucketSize = Math.floor(arr.length / bucketCount);\n            let totalSorted = bucketSize * bucketCount;\n            let remainder = arr.length - totalSorted;\n            for (let i = 0, j = 0; i < bucketCount; i++, j += bucketSize) {\n                // for each bucket, slice bucketSize amount of names into it\n                let group = (i + 1) * bucketSize;\n                buckets[i] = arr.slice(j, group);\n            };\n            if (remainder > 0) {\n                for (let i = 0; i < remainder; i++) {\n                    buckets[i].push(arr[totalSorted + i]);\n                };\n            }\n        } else {\n            // buckets restricted by bucketSize\n            let bucketSize = this.state.pax;\n            let remainder = this.state.fullGroup ? (arr.length % bucketSize) : 0;\n            let balance = arr.splice(0, remainder);\n            for (let i = 0, j = arr.length; i < j; i += bucketSize) {\n                let bucket = arr.slice(i , i + bucketSize);\n                buckets.push(bucket);\n            };\n            if (this.state.fullGroup) {\n                for (let i = 0; i < balance.length; i++) {\n                    buckets[i].push(balance[i]);\n                };\n            }\n        }\n        console.log(buckets);\n        return buckets;\n    }\n\n    renderBucket = (names) => {\n        return names.map((name, index) => {\n            name = name.charAt(0).toUpperCase() + name.slice(1);\n            return <p key={index}>{name}</p>\n        });\n    }\n\n    shuffle = () => {\n        let count = this.state.count;\n        count++;\n        this.setState({shuffle: count});\n    }\n\n    render() {\n        let presentPeople = [...this.props.people.present];\n        let shuffled = this.shuffleArray(presentPeople);\n        let buckets = this.createBuckets(shuffled);\n\n        let groups = buckets.map((bucket, index) => {\n            bucket = this.renderBucket(bucket);\n            return (\n                <div key={index} className=\"group\">\n                    <p className=\"group-index\">{index+1}</p>\n                    <div>{bucket}</div>\n                </div>\n            )\n        });\n\n        let totalGroups = buckets.length;\n\n        let nolbCheckbox = this.state.custom ? null : (\n        <React.Fragment>\n            <label>No One Left Behind</label>\n            <input type=\"checkbox\" onChange={this.toggleFullGroup} />\n        </React.Fragment>\n        );\n\n        return (\n            <div id=\"groupings-wrapper\">\n                <h2>Groups <span className=\"total-count\">Total: {totalGroups}</span></h2>\n                <div id=\"grouping-menu\">\n                    <SortingMenu custom={this.state.custom} pax={this.state.pax} changeHandler={this.changeHandler} customGroups={this.customGroups} />\n                    <button id=\"shuffle\" onClick={this.shuffle}>Shuffle</button>\n                    <div>\n                        <label>Custom Groups</label>\n                        <input type=\"checkbox\" onChange={this.toggleCustom} />\n                        {nolbCheckbox}\n                    </div>\n                </div>\n                <div id=\"grouping-results\">\n                    {groups}\n                </div>\n            </div>\n        )\n    }\n}\n\nclass SortingMenu extends Component {\n\n    render() {\n        return this.props.custom ? (\n            <React.Fragment>\n                <input className=\"group-input\" id=\"custom-group\" \n                    placeholder=\"Custom no. of groups\" \n                    onKeyDown={this.props.customGroups}\n                    autoComplete=\"off\"\n                />\n            </React.Fragment>\n        ) : (\n            <React.Fragment>\n                <select className=\"group-input\" id=\"pax-group\" \n                    defaultValue={this.props.pax} \n                    onChange={this.props.changeHandler}\n                >\n                    <option value=\"1\">Pax per Group</option>\n                    <option value=\"2\">Pairs</option>\n                    <option value=\"3\">Threes</option>\n                    <option value=\"4\">Fours</option>\n                    <option value=\"5\">Fives</option>\n                </select>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Groupings;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Attendance from './attendance';\nimport Groupings from './groupings';\n\nclass App extends Component {\n    state = {\n        people: {\n            present: [],\n            absent: []\n        }\n    }\n\n    componentDidMount(){\n        this.getNamesFromURL();\n    }\n\n    getNamesFromURL = () => {\n        // console.log(this.props.location.search);\n        if (this.props.location.search.length > 0) {\n\n            let queryParams = {\n                present: [],\n                absent: []\n            };\n            let inputQuery = this.props.location.search.replace('?','').replace(/%20/g, ' ').split('&');\n\n            for (let i = 0; i < inputQuery.length; i++) {\n                let queryPair = inputQuery[i].split('=');\n                if (queryPair[1]) {\n                    queryParams[queryPair[0]] = queryPair[1].toLowerCase().split('+');\n                }\n            };\n\n            this.setState({people: queryParams});\n        }\n    }\n\n    formNewURL = () => {\n        let currentPeople = this.state.people;\n        let newQuery = [];\n\n        Object.keys(currentPeople).forEach((key, index) => {\n            let newValue = currentPeople[key].join(\"+\").replace(/ /g, '%20');\n            let newPair = [key.concat(\"=\", newValue)];\n            newQuery = [...newQuery, newPair];\n        })\n\n        newQuery = \"?\".concat(newQuery.join(\"&\"));\n\n        this.props.history.push('/'+newQuery);\n    }\n\n    addName = (newName) => {\n        let updatedPeople = this.state.people;\n        updatedPeople.present = [...updatedPeople.present, newName.toLowerCase()];\n        this.setState({people: updatedPeople}, () => {\n            console.log(\"added!\", this.state.people.present);\n            this.formNewURL();\n        });\n    }\n\n    toggleAttendance = (category, name, index) => {\n        let clickedName = name.toLowerCase();\n        let attendance = category;\n        let updatedPeople = this.state.people;\n\n        updatedPeople[attendance].splice(index, 1);\n\n        if (attendance === \"present\") {\n            updatedPeople.absent = [...updatedPeople.absent, clickedName];\n        } else {\n            updatedPeople.present = [...updatedPeople.present, clickedName];\n        };\n\n        this.setState({people: updatedPeople}, () => {\n            this.formNewURL();\n        });\n    }\n\n    deleteName = (name, index) => {\n        let updatedPeople = this.state.people;\n        updatedPeople.absent.splice(index, 1);\n        this.setState({people: updatedPeople}, () => {\n            this.formNewURL();\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"content-wrapper\">\n                <Attendance\n                    people={this.state.people}\n                    addName={this.addName}\n                    toggleAttendance={this.toggleAttendance}\n                    deleteName={this.deleteName}\n                />\n                <Groupings\n                    people={this.state.people}\n                />\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Route } from \"react-router-dom\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n    <HashRouter basename='/'>\n        <div className=\"page-wrapper\">\n            <h1 id=\"header\">Really Really Random Groups</h1>\n            <Route exact path=\"/\" component={App} />\n        </div>\n    </HashRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}